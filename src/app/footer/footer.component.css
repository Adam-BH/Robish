.footer-basic {
    padding: 40px 0;
    background-color: #3b3838;
    color: #4b4c4d;
}

.footer-basic ul {
    padding: 0;
    list-style: none;
    text-align: center;
    font-size: 18px;
    line-height: 1.6;
    margin-bottom: 0;
}

.footer-basic li {
    padding: 0 10px;
}

.footer-basic ul a {
    color: inherit;
    text-decoration: none;
    opacity: 0.8;
    color: white;
}

.footer-basic ul a:hover {
    opacity: 1;
}

.footer-basic .social {
    text-align: center;
    padding-bottom: 25px;
    color: snow;
}

.footer-basic .social>a {
    font-size: 24px;
    width: 40px;
    height: 40px;
    line-height: 40px;
    display: inline-block;
    text-align: center;
    border-radius: 50%;
    border: 1px solid #ccc;
    margin: 0 8px;
    color: inherit;
    opacity: 0.75;
}

.footer-basic .social>a:hover {
    opacity: 0.9;
}

.footer-basic .copyright {
    margin-top: 15px;
    text-align: center;
    font-size: 13px;
    color: #aaa;
    margin-bottom: 0;
}


/* import { Component, OnInit } from '@angular/core';
import { RoomCrudService } from '../services/room-crud.service';
import { map } from 'rxjs/operators';
@Component({
  selector: 'app-device-connected',
  templateUrl: './device-connected.component.html',
  styleUrls: ['./device-connected.component.css']
})
export class DeviceConnectedComponent implements OnInit {
  harmfulList:any;
  harmlessList:any;
  destination:any;
  location:any;
  battery:any;
  
  constructor(private roomservice: RoomCrudService) { }

  ngOnInit(): void {
    // this.getAllHarmful();
    // this.getAllHarmless();
    // this.getAllDestination();
    // this.getAllLocation();
    // this.getAllBattery();
    this.getAll();
  }
  getAllHarmful(){
    this.roomservice.getAllHarmful().snapshotChanges().
    pipe(map(changes => changes.map(c => ({key: c.payload.key, ... c.payload.val()})))).subscribe(rs=> {
      console.log(rs);
      this.harmfulList = rs;
    })
  }

  getAllHarmless(){
    this.roomservice.getAllHarmless().snapshotChanges().
    pipe(map(changes => changes.map(c => ({key: c.payload.key, ... c.payload.val()})))).subscribe(rs=> {
      console.log(rs);
      this.harmlessList = rs;
    })
  }

  getAllDestination(){
    this.roomservice.getAllDestination().snapshotChanges().
    pipe(map(changes => changes.map(c => ({key: c.payload.key, ... c.payload.val()})))).subscribe(rs=> {
      console.log('destination');
      console.log('X',rs[0].X);
      console.log('Y',rs[0].Y);
      this.destination ={
        X:rs[0].X,
        Y:rs[0].Y
      };
    })
  }

  getAllLocation(){
    this.roomservice.getAllLocation().snapshotChanges().
    pipe(map(changes => changes.map(c => ({key: c.payload.key, ... c.payload.val()})))).subscribe(rs=> {
      console.log('location');
      console.log('X',rs[0].X);
      console.log('Y',rs[0].Y);
      this.location = {
        X:rs[0].X,
        Y:rs[0].Y
      };
    })
  }

  getAllBattery(){
    this.roomservice.getAllBattery().snapshotChanges().
    pipe(map(changes => changes.map(c => ({key: c.payload.key, ... c.payload.val()})))).subscribe(rs=> {
      console.log('battery');
      console.log(rs);
      this.battery = {
        percentage: rs[0]
      };
    })
  }
 
  getAll(){
    this.roomservice.getAll().snapshotChanges().
    pipe(map(changes => changes.map(c => ({key: c.payload.key, ... c.payload.val()})))).subscribe(rs=> {
      console.log('robot');
      console.log(rs[0].battery.percentage);
      
    })
  }
} */